[tool.poetry]
name = "demo-python-memory-reference-accounting"
version = "0.0.1"
description = "Demonstrating Python memory allocator reference counting and debug."
authors = ["d33bs <dave.bunten@cuanschutz.edu>"]
license = "BSD-3-Clause"
readme = "README.md"
packages = [{include = "pymaccounter", from="src"}]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"

[tool.poetry.group.runner.dependencies]
dagger-io = "^0.9.5"
anyio = "^4.2.0"
fire = "^0.5.0"
poethepoet = "^0.24.4"

# define poethepoet convenience access
# to test runner workflow definition
[tool.poe.tasks.run_all_tests]
cmd = """
python src/pymaccounter/runner.py \
'["test_baseline.py", \
"test_multiply_gc.collect.py", \
"test_multiply_gc.debug_leak.py", \
"test_multiply_gc.callbacks.py"]'
"""

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.vulture]
min_confidence = 80
paths = ["src"]
sort_by_size = true
verbose = true

[tool.isort]
profile = "black"

[tool.bandit.assert_used]
skips =  ['*_test.py', '*test_*.py']

[tool.setuptools_scm]
